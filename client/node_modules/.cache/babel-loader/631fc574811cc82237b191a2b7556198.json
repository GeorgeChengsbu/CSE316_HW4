{"ast":null,"code":"var _jsxFileName = \"/Users/george/Downloads/Top5Lists_HW4/client/src/auth/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconsole.log(\"create AuthContext: \" + AuthContext); // THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\n\nexport const AuthActionType = {\n  GET_LOGGED_IN: \"GET_LOGGED_IN\",\n  REGISTER_USER: \"REGISTER_USER\"\n};\n\nfunction AuthContextProvider(props) {\n  _s();\n\n  const [auth, setAuth] = useState({\n    user: null,\n    loggedIn: false\n  });\n  const history = useHistory();\n  useEffect(() => {\n    auth.getLoggedIn();\n  }, []);\n\n  const authReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      case AuthActionType.GET_LOGGED_IN:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: payload.loggedIn\n          });\n        }\n\n      case AuthActionType.REGISTER_USER:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: true\n          });\n        }\n\n      default:\n        return auth;\n    }\n  };\n\n  auth.getLoggedIn = async function () {\n    const response = await api.getLoggedIn();\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.SET_LOGGED_IN,\n        payload: {\n          loggedIn: response.data.loggedIn,\n          user: response.data.user\n        }\n      });\n    }\n  };\n\n  auth.setLoggedIn = async function (userData, store) {\n    const response = await api.loginUser(userData);\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.REGISTER_USER,\n        payload: {\n          user: response.data.user\n        }\n      });\n      history.push(\"/\");\n      store.loadIdNamePairs();\n    }\n  };\n\n  auth.registerUser = async function (userData, store) {\n    const response = await api.registerUser(userData);\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.REGISTER_USER,\n        payload: {\n          user: response.data.user\n        }\n      });\n      history.push(\"/\");\n      store.loadIdNamePairs();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"GpD44ljWoaxV/5r2+4QPOJ690a4=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\nexport { AuthContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/george/Downloads/Top5Lists_HW4/client/src/auth/index.js"],"names":["React","createContext","useEffect","useState","useHistory","api","AuthContext","console","log","AuthActionType","GET_LOGGED_IN","REGISTER_USER","AuthContextProvider","props","auth","setAuth","user","loggedIn","history","getLoggedIn","authReducer","action","type","payload","response","status","SET_LOGGED_IN","data","setLoggedIn","userData","store","loginUser","push","loadIdNamePairs","registerUser","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\"\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.getLoggedIn = async function () {\n        const response = await api.getLoggedIn();\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.SET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user\n                }\n            });\n        }\n    }\n\n    auth.setLoggedIn = async function(userData, store) {\n        const response = await api.loginUser(userData);\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.REGISTER_USER,\n                payload: {\n                    user: response.data.user\n                }\n            })\n            history.push(\"/\");\n            store.loadIdNamePairs();\n        }\n    }\n    auth.registerUser = async function(userData, store) {\n        const response = await api.registerUser(userData);      \n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.REGISTER_USER,\n                payload: {\n                    user: response.data.user\n                }\n            })\n            history.push(\"/\");\n            store.loadIdNamePairs();\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };"]},"metadata":{},"sourceType":"module"}